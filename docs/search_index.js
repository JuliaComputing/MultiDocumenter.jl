var documenterSearchIndex = {"docs":
[{"location":"internal/#Internal-docstrings","page":"Internal docstrings","title":"Internal docstrings","text":"","category":"section"},{"location":"internal/","page":"Internal docstrings","title":"Internal docstrings","text":"warning: Not public API\nThese functions are not part of the MultiDocumenter public API.","category":"page"},{"location":"internal/","page":"Internal docstrings","title":"Internal docstrings","text":"Modules = [MultiDocumenter.DocumenterTools]","category":"page"},{"location":"internal/#MultiDocumenter.DocumenterTools.FileInfo","page":"Internal docstrings","title":"MultiDocumenter.DocumenterTools.FileInfo","text":"struct FileInfo\n\nObjects of this type are passed as arguments to the callback of the walkdocs function. See walkdocs for information on how to interpret the docstrings.\n\n\n\n\n\n","category":"type"},{"location":"internal/#MultiDocumenter.DocumenterTools.get_meta_redirect_url-Tuple{AbstractString}","page":"Internal docstrings","title":"MultiDocumenter.DocumenterTools.get_meta_redirect_url","text":"Parses the HTML file at indexhtml_path and tries to extract the url=... value of the redirect <meta http-equiv=\"refresh\" ...> tag.\n\n\n\n\n\n","category":"method"},{"location":"internal/#MultiDocumenter.DocumenterTools.isdochtml-Tuple{MultiDocumenter.DocumenterTools.FileInfo}","page":"Internal docstrings","title":"MultiDocumenter.DocumenterTools.isdochtml","text":"isdochtml(::Fileinfo) -> Bool\n\nChecks if the file is a Documenter-generated HTML file.\n\n\n\n\n\n","category":"method"},{"location":"internal/#MultiDocumenter.DocumenterTools.update_canonical_links-Tuple{AbstractString}","page":"Internal docstrings","title":"MultiDocumenter.DocumenterTools.update_canonical_links","text":"Takes the multi-versioned Documenter site in docs_directory and updates the HTML canonical URLs to point to canonical.\n\n\n\n\n\n","category":"method"},{"location":"internal/#MultiDocumenter.DocumenterTools.update_canonical_links_for_version-Tuple{AbstractString}","page":"Internal docstrings","title":"MultiDocumenter.DocumenterTools.update_canonical_links_for_version","text":"DocumenterTools.update_canonical_links_for_build(\n    docs_directory::AbstractString;\n    canonical::AbstractString,\n)\n\ncanonical: corresponds to the canonical attribute of Documenter.HTML, specifying the root of the canonical URL.\n\n\n\n\n\n","category":"method"},{"location":"internal/#MultiDocumenter.DocumenterTools.walkdocs","page":"Internal docstrings","title":"MultiDocumenter.DocumenterTools.walkdocs","text":"walkdocs(f, dir::AbstractString[, filter_cb]; collect::Bool=false)\n\nTakes a directory dir, which is assumed to contain Documenter-generated documentation, walks over all the files and calls f on each of the files it find. Optionally, a filter_cb(::FileInfo) function can be passed to only call f on files for which it returns true.\n\nf and filter_cb will be called with a single object that has the following fields (all strings):\n\n.root: the root directory of the walk, i.e. dir (but as an absolute path)\n.filename: file name\n.relpath: path to the file, relative to dir\n.fullpath: absolute path to the file\n\nSee also the FileInfo struct.\n\nIf collect = true is set, the function also \"collects\" all the return values from f from each of the function calls, essentially making walkdocs behave like a map function applied on each of the HTML files.\n\nwalkdocs(directory_root, filter = isdochtml) do fileinfo\n    @show fileinfo.fullpath\nend\n\n\n\n\n\n","category":"function"},{"location":"#MultiDocumenter","page":"MultiDocumenter","title":"MultiDocumenter","text":"","category":"section"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"This package aggregates Documenter.jl documentation from multiple sources into one page with a global search bar.","category":"page"},{"location":"#Example-usage","page":"MultiDocumenter","title":"Example usage","text":"","category":"section"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"using MultiDocumenter\n\nclonedir = mktempdir()\n\ndocs = [\n    MultiDocumenter.DropdownNav(\"Debugging\", [\n        MultiDocumenter.MultiDocRef(\n            upstream = joinpath(clonedir, \"Infiltrator\"),\n            path = \"inf\",\n            name = \"Infiltrator\",\n            giturl = \"https://github.com/JuliaDebug/Infiltrator.jl.git\",\n        ),\n        MultiDocumenter.MultiDocRef(\n            upstream = joinpath(clonedir, \"JuliaInterpreter\"),\n            path = \"debug\",\n            name = \"JuliaInterpreter\",\n            giturl = \"https://github.com/JuliaDebug/JuliaInterpreter.jl.git\",\n        ),\n    ]),\n    MultiDocumenter.MegaDropdownNav(\"Mega Debugger\", [\n        MultiDocumenter.Column(\"Column 1\", [\n            MultiDocumenter.MultiDocRef(\n                upstream = joinpath(clonedir, \"Infiltrator\"),\n                path = \"inf\",\n                name = \"Infiltrator\",\n                giturl = \"https://github.com/JuliaDebug/Infiltrator.jl.git\",\n            ),\n            MultiDocumenter.MultiDocRef(\n                upstream = joinpath(clonedir, \"JuliaInterpreter\"),\n                path = \"debug\",\n                name = \"JuliaInterpreter\",\n                giturl = \"https://github.com/JuliaDebug/JuliaInterpreter.jl.git\",\n            ),\n        ]),\n        MultiDocumenter.Column(\"Column 2\", [\n            MultiDocumenter.MultiDocRef(\n                upstream = joinpath(clonedir, \"Infiltrator\"),\n                path = \"inf\",\n                name = \"Infiltrator\",\n                giturl = \"https://github.com/JuliaDebug/Infiltrator.jl.git\",\n            ),\n            MultiDocumenter.MultiDocRef(\n                upstream = joinpath(clonedir, \"JuliaInterpreter\"),\n                path = \"debug\",\n                name = \"JuliaInterpreter\",\n                giturl = \"https://github.com/JuliaDebug/JuliaInterpreter.jl.git\",\n            ),\n        ]),\n    ]),\n    MultiDocumenter.MultiDocRef(\n        upstream = joinpath(clonedir, \"DataSets\"),\n        path = \"data\",\n        name = \"DataSets\",\n        giturl = \"https://github.com/JuliaComputing/DataSets.jl.git\",\n        # or use ssh instead for private repos:\n        # giturl = \"git@github.com:JuliaComputing/DataSets.jl.git\",\n    ),\n]\n\noutpath = joinpath(@__DIR__, \"out\")\n\nMultiDocumenter.make(\n    outpath,\n    docs;\n    search_engine = MultiDocumenter.SearchConfig(\n        index_versions = [\"stable\"],\n        engine = MultiDocumenter.FlexSearch\n    )\n)","category":"page"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"(Image: example)","category":"page"},{"location":"#Deployment","page":"MultiDocumenter","title":"Deployment","text":"","category":"section"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"Check .github/workflows/deploy.yml and docs/make.jl for an example on how to deploy MultiDocumenter-generated aggregates to a git branch.","category":"page"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"The result of that script is available at https://juliacomputing.github.io/MultiDocumenter.jl/.","category":"page"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"You can of course also just push the output artefact directly to S3 or some other hosting service.","category":"page"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"Warning MultiDocumenter sites can not be deployed on Windows right now, and the make() function will throw an error. See #70.It is still possible to develop and debug MultiDocumenter sites on Windows if the build script is run interactively (e.g. by include-ing it into a REPL session).","category":"page"},{"location":"#Docstrings","page":"MultiDocumenter","title":"Docstrings","text":"","category":"section"},{"location":"","page":"MultiDocumenter","title":"MultiDocumenter","text":"Modules = [MultiDocumenter]","category":"page"},{"location":"#MultiDocumenter.DropdownComponent","page":"MultiDocumenter","title":"MultiDocumenter.DropdownComponent","text":"abstract type DropdownComponent\n\nThe supertype for any component that can be put in a dropdown column and  rendered using MultiDocumenter.render(::YourComponent, thispagepath, dir, prettyurls).  \n\nAll DropdownComponents go in Columns, which go in MegaDropdownNav.\n\nAny subtype of DropdownComponent must implement that render method.\n\nThe main subtype is MultiDocRef, which refers to external documentation and adds it to the search index.  However, there are others like Link which is used to link to external sites without making them searchable, and users can implement their own custom components.\n\n\n\n\n\n","category":"type"},{"location":"#MultiDocumenter.Link","page":"MultiDocumenter","title":"MultiDocumenter.Link","text":"Link([text::String], link::String, [isexternal::Bool]) <: DropdownComponent\n\nRepresents a link to an external site.\n\n\n\n\n\n","category":"type"},{"location":"#MultiDocumenter.MultiDocRef","page":"MultiDocumenter","title":"MultiDocumenter.MultiDocRef","text":"struct MultiDocRef <: DropdownComponent\nMultiDocRef(; upstream, name, path, giturl = \"\", branch = \"gh-pages\", fix_canonical_url = true)\n\nRepresents one set of docs that will get an entry in the MultiDocumenter navigation.\n\nRequired arguments:\n\nupstream: the local directory where the documentation is located. If giturl is passed, MultiDocumenter will clone into this directory.\nname: string used in the MultiDocumenter navigation for this item\npath: the URL path under which the contents of upstream is placed\n\nOptional arguments:\n\ngiturl: URL of the remote Git repository that will be cloned. If this is unset, then upstream must be an existing directory.\nbranch: Git branch of giturl where the docs will be pulled from (defaults to gh-pages)\nfix_canonical_url: this can be set to false to disable the canonical URL fixing for this MultiDocRef (see also canonical_domain for make).\n\n\n\n\n\n","category":"type"},{"location":"#MultiDocumenter.SearchConfig","page":"MultiDocumenter","title":"MultiDocumenter.SearchConfig","text":"SearchConfig(index_versions = [\"stable\"], engine = MultiDocumenter.FlexSearch, lowfi = false)\n\nindex_versions is a vector of relative paths used for generating the search index. Only the first matching path is considered. engine may be MultiDocumenter.FlexSearch, MultiDocumenter.Stork, or a module that conforms to the expected API (which is currently undocumented). lowfi = true will try to minimize search index size. Only relevant for flexsearch.\n\n\n\n\n\n","category":"type"},{"location":"#MultiDocumenter.make-Tuple{Any, Vector}","page":"MultiDocumenter","title":"MultiDocumenter.make","text":"make(\n    outdir,\n    docs::Vector{MultiDocRef};\n    assets_dir,\n    brand_image,\n    custom_stylesheets = [],\n    custom_scripts = [],\n    search_engine = SearchConfig(),\n    prettyurls = true,\n    rootpath = \"/\",\n    hide_previews = true,\n    canonical = nothing,\n)\n\nAggregates multiple Documenter.jl-based documentation pages docs into outdir.\n\nassets_dir is copied into outdir/assets\nbrand_image is a BrandImage(path, imgpath), which is rendered as the leftmost item in the global navigation\ncustom_stylesheets is a Vector{String} of relative stylesheet URLs injected into each page.\ncustom_scripts is a Vector{Union{String, Docs.HTML}}. Strings can be relative or absolute URLs, while Docs.HTML objects are inserted as the content of inline scripts.\nsearch_engine inserts a global search bar if not false. See SearchConfig for more details.\nprettyurls removes all index.html suffixes from links in the global navigation.\nrootpath is the path your site ends up being deployed at, e.g. /foo/ if it's hosted at https://bar.com/foo\nhide_previews removes preview builds from the aggregated documentation.\ncanonical_domain: determines the the schema and authority (domain) of the (e.g. https://example.org) deployed site. If set, MultiDocumenter will check and, if necessary, update the canonical URL tags for each package site to point to the correct place directory. Similar to the canonical argument of Documenter.HTML constructor, except that it should not contain the path component – that is determined from rootpath.\nsitemap, if enabled, will generate a sitemap.xml file at the root of the output directory. Requires canonical_domain to be set, since the sitemap is determined from canonical URLs.\nsitemap_filename can be used to override the default sitemap filename (sitemap.xml)\n\n\n\n\n\n","category":"method"}]
}
